{"name":"Rack::Accept","tagline":"HTTP Accept* for Ruby/Rack","body":"**Rack::Accept** is a suite of tools for Ruby/Rack applications that eases the\r\ncomplexity of building and interpreting the Accept* family of [HTTP request headers][rfc].\r\n\r\nSome features of the library are:\r\n\r\n  * Strict adherence to [RFC 2616][rfc], specifically [section 14][rfc-sec14]\r\n  * Full support for the [Accept][rfc-sec14-1], [Accept-Charset][rfc-sec14-2],\r\n    [Accept-Encoding][rfc-sec14-3], and [Accept-Language][rfc-sec14-4] HTTP\r\n    request headers\r\n  * May be used as [Rack][rack] middleware or standalone\r\n  * A comprehensive [test suite][test] that covers many edge cases\r\n\r\n[rfc]: http://www.w3.org/Protocols/rfc2616/rfc2616.html\r\n[rfc-sec14]: http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html\r\n[rfc-sec14-1]: http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1\r\n[rfc-sec14-2]: http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.2\r\n[rfc-sec14-3]: http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.3\r\n[rfc-sec14-4]: http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.4\r\n[rack]: http://rack.rubyforge.org/\r\n[test]: http://github.com/mjijackson/rack-accept/tree/master/test/\r\n\r\n## Installation\r\n\r\n**Using [RubyGems](http://rubygems.org/):**\r\n\r\n    $ sudo gem install rack-accept\r\n\r\n**From a local copy:**\r\n\r\n    $ git clone git://github.com/mjijackson/rack-accept.git\r\n    $ cd rack-accept\r\n    $ rake package && sudo rake install\r\n\r\n## Usage\r\n\r\n**Rack::Accept** implements the Rack middleware interface and may be used with any\r\nRack-based application. Simply insert the `Rack::Accept` module in your Rack\r\nmiddleware pipeline and access the `Rack::Accept::Request` object in the\r\n`rack-accept.request` environment key, as in the following example.\r\n\r\n```ruby\r\nrequire 'rack/accept'\r\n\r\nuse Rack::Accept\r\n\r\napp = lambda do |env|\r\n  accept = env['rack-accept.request']\r\n  response = Rack::Response.new\r\n\r\n  if accept.media_type?('text/html')\r\n    response['Content-Type'] = 'text/html'\r\n    response.write \"<p>Hello. You accept text/html!</p>\"\r\n  else\r\n    response['Content-Type'] = 'text/plain'\r\n    response.write \"Apparently you don't accept text/html. Too bad.\"\r\n  end\r\n\r\n  response.finish\r\nend\r\n\r\nrun app\r\n```\r\n\r\n**Rack::Accept** can also construct automatic [406][406] responses if you set up\r\nthe types of media, character sets, encoding, or languages your server is able\r\nto serve ahead of time. If you pass a configuration block to your `use`\r\nstatement it will yield the `Rack::Accept::Context` object that is used for that\r\ninvocation.\r\n\r\n[406]: http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.7\r\n\r\n```ruby\r\nrequire 'rack/accept'\r\n\r\nuse(Rack::Accept) do |context|\r\n  # We only ever serve content in English or Japanese from this site, so if\r\n  # the user doesn't accept either of these we will respond with a 406.\r\n  context.languages = %w< en jp >\r\nend\r\n\r\napp = ...\r\n\r\nrun app\r\n```\r\n\r\n**Note:** _You should think carefully before using Rack::Accept in this way.\r\nMany user agents are careless about the types of Accept headers they send, and\r\ndepend on apps not being too picky. Instead of automatically sending a 406, you\r\nshould probably only send one when absolutely necessary._\r\n\r\nAdditionally, **Rack::Accept** may be used outside of a Rack context to provide\r\nany Ruby app the ability to construct and interpret Accept headers.\r\n\r\n```ruby\r\nrequire 'rack/accept'\r\n\r\nmtype = Rack::Accept::MediaType.new\r\nmtype.qvalues = { 'text/html' => 1, 'text/*' => 0.8, '*/*' => 0.5 }\r\nmtype.to_s # => \"Accept: text/html, text/*;q=0.8, */*;q=0.5\"\r\n\r\ncset = Rack::Accept::Charset.new('unicode-1-1, iso-8859-5;q=0.8')\r\ncset.best_of(%w< iso-8859-5 unicode-1-1 >)  # => \"unicode-1-1\"\r\ncset.accept?('iso-8859-1')                  # => true\r\n```\r\n\r\nThe very last line in this example may look like a mistake to someone not\r\nfamiliar with the intricacies of [the spec][rfc-sec14-3], but it's actually\r\ncorrect. It just puts emphasis on the convenience of using this library so you\r\ndon't have to worry about these kinds of details.\r\n\r\n## Four-letter Words\r\n\r\n  - Spec: [http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html][rfc-sec14]\r\n  - Code: [http://github.com/mjijackson/rack-accept][code]\r\n  - Bugs: [http://github.com/mjijackson/rack-accept/issues][bugs]\r\n  - Docs: [http://mjijackson.github.com/rack-accept][docs]\r\n\r\n[code]: http://github.com/mjijackson/rack-accept\r\n[bugs]: http://github.com/mjijackson/rack-accept/issues\r\n[docs]: http://mjijackson.github.com/rack-accept\r\n\r\n## License\r\n\r\nCopyright 2012 Michael Jackson\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nThe software is provided \"as is\", without warranty of any kind, express or\r\nimplied, including but not limited to the warranties of merchantability,\r\nfitness for a particular purpose and noninfringement. In no event shall the\r\nauthors or copyright holders be liable for any claim, damages or other\r\nliability, whether in an action of contract, tort or otherwise, arising from,\r\nout of or in connection with the software or the use or other dealings in\r\nthe software.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}